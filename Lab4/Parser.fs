// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "src/Parser.fsy"


(* Convert [e_n; ... ; e_2; e_1] into App (... (App (e_1, e_2), ... e_n) *)
let rec genApp lst =
  match lst with
  | [] -> failwith "Unreachable"
  | [e] -> e
  | head :: tail -> AST.App (genApp tail, head)

let expsToExpr lst = genApp (List.rev lst)

let checkName func arg =
  if func = arg then failwith "Function and argument name are same"


# 22 "src/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | ARROW
  | ASSIGN
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | FUN
  | REC
  | ID of (string)
  | NUM of (int)
  | TRUE
  | FALSE
  | PLUS
  | MINUS
  | EQUAL
  | NOTEQ
  | LESS
  | GREATER
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_ARROW
    | TOKEN_ASSIGN
    | TOKEN_SEMICOLON
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_FUN
    | TOKEN_REC
    | TOKEN_ID
    | TOKEN_NUM
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_EQUAL
    | TOKEN_NOTEQ
    | TOKEN_LESS
    | TOKEN_GREATER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_expr
    | NONTERM_exp
    | NONTERM_exps
    | NONTERM_prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | ARROW  -> 3 
  | ASSIGN  -> 4 
  | SEMICOLON  -> 5 
  | IF  -> 6 
  | THEN  -> 7 
  | ELSE  -> 8 
  | LET  -> 9 
  | IN  -> 10 
  | FUN  -> 11 
  | REC  -> 12 
  | ID _ -> 13 
  | NUM _ -> 14 
  | TRUE  -> 15 
  | FALSE  -> 16 
  | PLUS  -> 17 
  | MINUS  -> 18 
  | EQUAL  -> 19 
  | NOTEQ  -> 20 
  | LESS  -> 21 
  | GREATER  -> 22 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_ARROW 
  | 4 -> TOKEN_ASSIGN 
  | 5 -> TOKEN_SEMICOLON 
  | 6 -> TOKEN_IF 
  | 7 -> TOKEN_THEN 
  | 8 -> TOKEN_ELSE 
  | 9 -> TOKEN_LET 
  | 10 -> TOKEN_IN 
  | 11 -> TOKEN_FUN 
  | 12 -> TOKEN_REC 
  | 13 -> TOKEN_ID 
  | 14 -> TOKEN_NUM 
  | 15 -> TOKEN_TRUE 
  | 16 -> TOKEN_FALSE 
  | 17 -> TOKEN_PLUS 
  | 18 -> TOKEN_MINUS 
  | 19 -> TOKEN_EQUAL 
  | 20 -> TOKEN_NOTEQ 
  | 21 -> TOKEN_LESS 
  | 22 -> TOKEN_GREATER 
  | 25 -> TOKEN_end_of_input
  | 23 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_expr 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_exp 
    | 15 -> NONTERM_exp 
    | 16 -> NONTERM_exp 
    | 17 -> NONTERM_exp 
    | 18 -> NONTERM_exp 
    | 19 -> NONTERM_exps 
    | 20 -> NONTERM_exps 
    | 21 -> NONTERM_prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 25 
let _fsyacc_tagOfErrorTerminal = 23

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | ARROW  -> "ARROW" 
  | ASSIGN  -> "ASSIGN" 
  | SEMICOLON  -> "SEMICOLON" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | FUN  -> "FUN" 
  | REC  -> "REC" 
  | ID _ -> "ID" 
  | NUM _ -> "NUM" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | EQUAL  -> "EQUAL" 
  | NOTEQ  -> "NOTEQ" 
  | LESS  -> "LESS" 
  | GREATER  -> "GREATER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us;65535us;19us;65535us;0us;22us;3us;4us;23us;5us;24us;6us;25us;7us;26us;8us;27us;9us;28us;10us;29us;11us;30us;12us;31us;13us;34us;14us;35us;15us;37us;16us;38us;17us;42us;18us;43us;19us;46us;20us;51us;21us;20us;65535us;0us;53us;3us;53us;23us;53us;24us;53us;25us;53us;26us;53us;27us;53us;28us;53us;29us;53us;30us;53us;31us;53us;34us;53us;35us;53us;37us;53us;38us;53us;42us;53us;43us;53us;46us;53us;51us;53us;53us;53us;20us;65535us;0us;2us;3us;2us;23us;2us;24us;2us;25us;2us;26us;2us;27us;2us;28us;2us;29us;2us;30us;2us;31us;2us;34us;2us;35us;2us;37us;2us;38us;2us;42us;2us;43us;2us;46us;2us;51us;2us;53us;54us;1us;65535us;0us;1us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;21us;42us;63us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;7us;2us;3us;4us;5us;6us;7us;8us;7us;3us;3us;4us;5us;6us;7us;8us;7us;3us;4us;4us;5us;6us;7us;8us;7us;3us;4us;5us;5us;6us;7us;8us;7us;3us;4us;5us;6us;6us;7us;8us;7us;3us;4us;5us;6us;7us;7us;8us;7us;3us;4us;5us;6us;7us;8us;8us;7us;3us;4us;5us;6us;7us;8us;9us;7us;3us;4us;5us;6us;7us;8us;9us;7us;3us;4us;5us;6us;7us;8us;9us;7us;3us;4us;5us;6us;7us;8us;10us;7us;3us;4us;5us;6us;7us;8us;10us;7us;3us;4us;5us;6us;7us;8us;11us;7us;3us;4us;5us;6us;7us;8us;11us;7us;3us;4us;5us;6us;7us;8us;12us;7us;3us;4us;5us;6us;7us;8us;12us;7us;3us;4us;5us;6us;7us;8us;13us;7us;3us;4us;5us;6us;7us;8us;18us;7us;3us;4us;5us;6us;7us;8us;21us;1us;3us;1us;4us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;1us;9us;1us;9us;3us;10us;11us;12us;2us;10us;11us;1us;10us;1us;10us;1us;11us;1us;11us;1us;11us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;13us;1us;13us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;18us;2us;19us;20us;1us;20us;1us;21us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;16us;24us;32us;40us;48us;56us;64us;72us;80us;88us;96us;104us;112us;120us;128us;136us;144us;152us;160us;162us;164us;166us;168us;170us;172us;174us;176us;178us;182us;185us;187us;189us;191us;193us;195us;197us;199us;201us;203us;205us;207us;209us;211us;213us;215us;217us;219us;221us;223us;226us;228us;|]
let _fsyacc_action_rows = 56
let _fsyacc_actionTableElements = [|9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;0us;49152us;0us;16385us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;0us;16386us;0us;16387us;0us;16388us;2us;16389us;17us;23us;18us;24us;2us;16390us;17us;23us;18us;24us;2us;16391us;17us;23us;18us;24us;2us;16392us;17us;23us;18us;24us;7us;32768us;7us;30us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;7us;32768us;8us;31us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;6us;16393us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;7us;32768us;10us;35us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;6us;16394us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;7us;32768us;10us;38us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;6us;16395us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;7us;32768us;10us;43us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;6us;16396us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;6us;16397us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;7us;32768us;2us;52us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;7us;32768us;0us;55us;17us;23us;18us;24us;19us;27us;20us;28us;21us;25us;22us;26us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;2us;32768us;12us;39us;13us;33us;2us;32768us;13us;36us;19us;34us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;1us;32768us;19us;37us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;1us;32768us;13us;40us;1us;32768us;13us;41us;1us;32768us;19us;42us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;1us;32768us;13us;45us;1us;32768us;3us;46us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;0us;16398us;0us;16399us;0us;16400us;0us;16401us;9us;32768us;1us;51us;6us;29us;9us;32us;11us;44us;13us;50us;14us;47us;15us;48us;16us;49us;18us;3us;0us;16402us;5us;16403us;1us;51us;13us;50us;14us;47us;15us;48us;16us;49us;0us;16404us;0us;16405us;|]
let _fsyacc_actionTableRowOffsets = [|0us;10us;11us;12us;22us;23us;24us;25us;28us;31us;34us;37us;45us;53us;60us;68us;75us;83us;90us;98us;105us;112us;120us;128us;138us;148us;158us;168us;178us;188us;198us;208us;218us;221us;224us;234us;244us;246us;256us;266us;268us;270us;272us;282us;292us;294us;296us;306us;307us;308us;309us;310us;320us;321us;327us;328us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;2us;3us;3us;3us;3us;3us;3us;6us;6us;7us;8us;4us;1us;1us;1us;1us;3us;1us;2us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;2us;2us;2us;2us;3us;3us;4us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16398us;16399us;16400us;16401us;65535us;16402us;65535us;16404us;16405us;|]
let _fsyacc_reductions = lazy [|
# 234 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 243 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exps in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "src/Parser.fsy"
                                  expsToExpr _1 
                   )
# 32 "src/Parser.fsy"
                 : 'gentype_expr));
# 254 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "src/Parser.fsy"
                                        AST.Neg _2 
                   )
# 33 "src/Parser.fsy"
                 : 'gentype_expr));
# 265 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "src/Parser.fsy"
                                            AST.Add (_1, _3) 
                   )
# 34 "src/Parser.fsy"
                 : 'gentype_expr));
# 277 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "src/Parser.fsy"
                                             AST.Sub (_1, _3) 
                   )
# 35 "src/Parser.fsy"
                 : 'gentype_expr));
# 289 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "src/Parser.fsy"
                                            AST.LessThan (_1, _3) 
                   )
# 36 "src/Parser.fsy"
                 : 'gentype_expr));
# 301 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "src/Parser.fsy"
                                               AST.GreaterThan (_1, _3) 
                   )
# 37 "src/Parser.fsy"
                 : 'gentype_expr));
# 313 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "src/Parser.fsy"
                                             AST.Equal (_1, _3) 
                   )
# 38 "src/Parser.fsy"
                 : 'gentype_expr));
# 325 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "src/Parser.fsy"
                                             AST.NotEq (_1, _3) 
                   )
# 39 "src/Parser.fsy"
                 : 'gentype_expr));
# 337 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "src/Parser.fsy"
                                                         AST.IfThenElse (_2, _4, _6) 
                   )
# 40 "src/Parser.fsy"
                 : 'gentype_expr));
# 350 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "src/Parser.fsy"
                                                       AST.LetIn (_2, _4, _6) 
                   )
# 41 "src/Parser.fsy"
                 : 'gentype_expr));
# 363 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "src/Parser.fsy"
                                                         
                             checkName _2 _3
                             AST.LetFunIn (_2, _3, _5, _7)
                           
                   )
# 42 "src/Parser.fsy"
                 : 'gentype_expr));
# 380 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> string in
            let _6 = parseState.GetInput(6) :?> 'gentype_expr in
            let _8 = parseState.GetInput(8) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "src/Parser.fsy"
                                                             
                             checkName _3 _4
                             AST.LetRecIn (_3, _4, _6, _8)
                           
                   )
# 46 "src/Parser.fsy"
                 : 'gentype_expr));
# 397 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "src/Parser.fsy"
                                               AST.Fun (_2, _4) 
                   )
# 50 "src/Parser.fsy"
                 : 'gentype_expr));
# 409 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "src/Parser.fsy"
                                 AST.Num _1 
                   )
# 52 "src/Parser.fsy"
                 : 'gentype_exp));
# 420 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "src/Parser.fsy"
                                  AST.True 
                   )
# 53 "src/Parser.fsy"
                 : 'gentype_exp));
# 430 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "src/Parser.fsy"
                                   AST.False 
                   )
# 54 "src/Parser.fsy"
                 : 'gentype_exp));
# 440 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "src/Parser.fsy"
                                AST.Var _1 
                   )
# 55 "src/Parser.fsy"
                 : 'gentype_exp));
# 451 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "src/Parser.fsy"
                                            _2 
                   )
# 56 "src/Parser.fsy"
                 : 'gentype_exp));
# 462 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "src/Parser.fsy"
                                 [_1] 
                   )
# 58 "src/Parser.fsy"
                 : 'gentype_exps));
# 473 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _2 = parseState.GetInput(2) :?> 'gentype_exps in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "src/Parser.fsy"
                                      _1 :: _2 
                   )
# 59 "src/Parser.fsy"
                 : 'gentype_exps));
# 485 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "src/Parser.fsy"
                                      _1 
                   )
# 61 "src/Parser.fsy"
                 : AST.Exp));
|]
# 497 "src/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 26;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf : AST.Exp =
    engine lexer lexbuf 0 :?> _
